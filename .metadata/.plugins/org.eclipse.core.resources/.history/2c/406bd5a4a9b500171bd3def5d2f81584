/*
 * @brief Blinky example using sysTick
 *
 * @note
 * Copyright(C) NXP Semiconductors, 2013
 * All rights reserved.
 *
 * @par
 * Software that is described herein is for illustrative purposes only
 * which provides customers with programming information regarding the
 * LPC products.  This software is supplied "AS IS" without any warranties of
 * any kind, and NXP Semiconductors and its licensor disclaim any and
 * all warranties, express or implied, including all implied warranties of
 * merchantability, fitness for a particular purpose and non-infringement of
 * intellectual property rights.  NXP Semiconductors assumes no responsibility
 * or liability for the use of the software, conveys no license or rights under any
 * patent, copyright, mask work right, or any other intellectual property rights in
 * or to any products. NXP Semiconductors reserves the right to make changes
 * in the software without notification. NXP Semiconductors also makes no
 * representation or warranty that such application will be suitable for the
 * specified use without further testing or modification.
 *
 * @par
 * Permission to use, copy, modify, and distribute this software and its
 * documentation is hereby granted, under NXP Semiconductors' and its
 * licensor's relevant copyrights in the software, without fee, provided that it
 * is used in conjunction with NXP Semiconductors microcontrollers.  This
 * copyright, permission, and disclaimer notice must appear in all copies of
 * this code.
 */

#include "board.h"

/*****************************************************************************
 * Private types/enumerations/variables
 ****************************************************************************/

#define TICKRATE_HZ (1000)	/* 1000 ticks per second */

/*****************************************************************************
 * Public types/enumerations/variables
 ****************************************************************************/
volatile bool time_flag, USART0_IRQ_flag=false,USART2_IRQ_flag=false;
//static char mensaje[]="Test ";
char recibido0[100], recibido2[100];
/*****************************************************************************
 * Private functions
 ****************************************************************************/

/*****************************************************************************
 * Public functions
 ****************************************************************************/

/**
 * @brief	Handle interrupt from SysTick timer
 * @return	Nothing
 */
void SysTick_Handler(void)
{
	time_flag=true;
}

/**
 * @brief USART configuration function
 * @return nothing
 */
void USARTconfig()
{
	Chip_UART_Init(LPC_USART2);
	Chip_UART_SetBaud(LPC_USART2, 9600);  /* Set Baud rate */
	Chip_UART_SetupFIFOS(LPC_USART2, UART_FCR_FIFO_EN | UART_FCR_TRG_LEV0); /* Modify FCR (FIFO Control Register)*/
	Chip_UART_TXEnable(LPC_USART2); /* Enable UART Transmission */
	Chip_UART_IntEnable(LPC_USART2, UART_IER_RBRINT);
	/* Enable Interrupt for UART channel */
	/* Priority = 1 */
	NVIC_SetPriority(USART2_IRQn, 1);
	/* Enable Interrupt for UART channel */
	NVIC_EnableIRQ(USART2_IRQn);
	Chip_UART_Init(LPC_USART0);
	Chip_UART_SetBaud(LPC_USART0, 9600);  /* Set Baud rate */
	Chip_UART_SetupFIFOS(LPC_USART0, UART_FCR_FIFO_EN | UART_FCR_TRG_LEV0); /* Modify FCR (FIFO Control Register)*/
	Chip_UART_TXEnable(LPC_USART0); /* Enable UART Transmission */
	Chip_UART_IntEnable(LPC_USART0, UART_IER_RBRINT);
	/* Enable Interrupt for UART channel */
	/* Priority = 1 */
	NVIC_SetPriority(USART0_IRQn, 1);
	/* Enable Interrupt for UART channel */
	NVIC_EnableIRQ(USART0_IRQn);
}

/**
 * @brief Receives data till EOL
 * @return Number of bytes read
 */
int ReadTillEOL(LPC_USART_T *pUART, void *data, int numBytes)
{
	int readBytes = 0;
	uint8_t *p8 = (uint8_t *) data;
	if ((readBytes < numBytes))
	{
		do
		{
			*p8=Chip_UART_ReadByte(pUART);
			readBytes++;
			p8++;
		}
		while((readBytes < numBytes) &&
				   *(p8-1)!='\n');
	}
	if (readBytes==numBytes)
		readBytes=0;
	return readBytes;
}
int ReadTillEOL_NonBlocking(LPC_USART_T *pUART, void *data, int numBytes)
{
	int readBytes = 0;
		uint8_t *p8 = (uint8_t *) data;

		/* Send until the transmit FIFO is full or out of bytes */
		while ((readBytes < numBytes) &&
			   ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_RDR) != 0)) {
			*p8 = Chip_UART_ReadByte(pUART);
			readBytes++;
			if (*p8=='\n')
					break;
			p8++;
		}

		return readBytes;
}

int SendTillEOL(LPC_USART_T *pUART, void *data, int numBytes)
{
	int sent = 0;
		uint8_t *p8 = (uint8_t *) data;
		if (*p8!='\0')
		{
			while (numBytes > sent && *(p8)!='\n')
			{
						Chip_UART_SendByte(pUART, *p8);
						p8++;
						sent++;
			}
			Chip_UART_SendByte(pUART, *p8);
			p8++;
			sent++;
		}

		return sent;
}

void UART2_IRQHandler()
{
	Chip_UART_IntDisable(LPC_USART0, UART_IER_RBRINT);
	USART2_IRQ_flag=true;
	ReadTillEOL(LPC_USART2,recibido2,sizeof(recibido2));
	//Board_LED_Toggle(3);
}
void UART0_IRQHandler()
{
	Chip_UART_IntDisable(LPC_USART2, UART_IER_RBRINT);
	USART0_IRQ_flag=true;
	ReadTillEOL(LPC_USART0,recibido0,sizeof(recibido0));
}

/**
 * @brief	main routine for example
 * @return	Function should not exit.
 */
int main(void)
{
	int i=0,read;
	for (i=0;i<sizeof(recibido0);i++)
	{
		recibido0[i]=0;
		recibido2[i]=0;
	}
	SystemCoreClockUpdate();
	Board_Init();

	Chip_SCU_PinMuxSet(0x6, 1, (SCU_MODE_INBUFF_EN | SCU_MODE_PULLUP | SCU_MODE_FUNC0));
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, 3, 0); // configura gpio 0
	Chip_GPIO_SetPinState(LPC_GPIO_PORT, 3, 0, true);//pone en high el pin gpio 0
	Chip_SCU_PinMuxSet(0x6, 8, (SCU_MODE_INBUFF_EN | SCU_MODE_PULLUP | SCU_MODE_FUNC0));
	Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, 5, 16);// configura pin gpio 4
	Chip_GPIO_SetPinState(LPC_GPIO_PORT, 5, 16, false); // pone en low el pin gpio 4

	/* Enable and setup SysTick Timer at a periodic rate */
	SysTick_Config(SystemCoreClock / TICKRATE_HZ);
	__WFI();
	time_flag=false;
	Chip_GPIO_SetPinState(LPC_GPIO_PORT, 5, 16, true);//pone en high el pin gpio 0

	NVIC_DisableIRQ(SysTick_IRQn);

	Board_UART_Init(LPC_USART2);
	Board_UART_Init(LPC_USART0);
	USARTconfig();


	while (1) {
		/*if (time_flag)
		{
			time_flag=false;
			if (USART2_IRQ_flag)
			{
				USART2_IRQ_flag=false;
				for (i=0,read=0;recibido2[i]!='\0';i++)
				{
					read++;
				}
				//i=SendTillEOL(LPC_USART0,recibido2,sizeof(recibido2));
				for (i=0;i<read;i++)
				{
					Chip_UART_SendByte(LPC_USART0,recibido2[i]);
				}

				read=ReadTillEOL(LPC_USART0,recibido0,sizeof(recibido0));
				//recibido0[i]='\n';
				for (i=0;i<read;i++)
				{
					Chip_UART_SendByte(LPC_USART2,recibido0[i]);
				}
				//i=SendTillEOL(LPC_USART2,recibido0,sizeof(recibido0));

				for (i=0;i<sizeof(recibido0);i++)
				{
					recibido0[i]=0;
					recibido2[i]=0;
				}
			}
			//ReadTillEOL(LPC_USART2,recibido2,sizeof(recibido2));
			//ReadTillEOL_NonBlocking(LPC_USART0,recibido0,sizeof(recibido0));
			//if (recibido2[0]!='\0')
			//SendTillEOL(LPC_USART0,recibido2,sizeof(recibido2));
			//if (recibido0[0]!='\0')
			//SendTillEOL(LPC_USART2,recibido0,sizeof(recibido0));

		}*/

		if (USART2_IRQ_flag)
		{
			USART2_IRQ_flag=false;
			for (i=0,read=0;recibido2[i]!='\0';i++)
			{
				read++;
			}
			for (i=0;i<read;i++)
			{
				Chip_UART_SendByte(LPC_USART0,recibido2[i]);
			}
			for (i=0;i<sizeof(recibido2);i++)
			{
				recibido2[i]=0;
			}
			Chip_UART_IntEnable(LPC_USART0, UART_IER_RBRINT);
		}
		if (USART0_IRQ_flag)
		{
			USART0_IRQ_flag=false;
			for (i=0,read=0;recibido0[i]!='\0';i++)
			{
				read++;
			}
			for (i=0;i<read;i++)
			{
				Chip_UART_SendByte(LPC_USART2,recibido0[i]);
			}
			for (i=0;i<sizeof(recibido0);i++)
			{
				recibido0[i]=0;
			}
			Chip_UART_IntEnable(LPC_USART2, UART_IER_RBRINT);
		}
		__WFI();
	}
}
